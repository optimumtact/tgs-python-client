# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ChatChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'irc_channel': 'str',
        'discord_channel_id': 'int',
        'is_admin_channel': 'bool',
        'is_watchdog_channel': 'bool',
        'is_updates_channel': 'bool',
        'tag': 'str'
    }

    attribute_map = {
        'irc_channel': 'ircChannel',
        'discord_channel_id': 'discordChannelId',
        'is_admin_channel': 'isAdminChannel',
        'is_watchdog_channel': 'isWatchdogChannel',
        'is_updates_channel': 'isUpdatesChannel',
        'tag': 'tag'
    }

    def __init__(self, irc_channel=None, discord_channel_id=None, is_admin_channel=None, is_watchdog_channel=None, is_updates_channel=None, tag=None):  # noqa: E501
        """ChatChannel - a model defined in Swagger"""  # noqa: E501
        self._irc_channel = None
        self._discord_channel_id = None
        self._is_admin_channel = None
        self._is_watchdog_channel = None
        self._is_updates_channel = None
        self._tag = None
        self.discriminator = None
        if irc_channel is not None:
            self.irc_channel = irc_channel
        if discord_channel_id is not None:
            self.discord_channel_id = discord_channel_id
        if is_admin_channel is not None:
            self.is_admin_channel = is_admin_channel
        if is_watchdog_channel is not None:
            self.is_watchdog_channel = is_watchdog_channel
        if is_updates_channel is not None:
            self.is_updates_channel = is_updates_channel
        if tag is not None:
            self.tag = tag

    @property
    def irc_channel(self):
        """Gets the irc_channel of this ChatChannel.  # noqa: E501

        The IRC channel name. Also potentially contains the channel passsword (if separated by a colon).  If multiple copies of the same channel with different keys are added to the server, the one that will be used is undefined.  # noqa: E501

        :return: The irc_channel of this ChatChannel.  # noqa: E501
        :rtype: str
        """
        return self._irc_channel

    @irc_channel.setter
    def irc_channel(self, irc_channel):
        """Sets the irc_channel of this ChatChannel.

        The IRC channel name. Also potentially contains the channel passsword (if separated by a colon).  If multiple copies of the same channel with different keys are added to the server, the one that will be used is undefined.  # noqa: E501

        :param irc_channel: The irc_channel of this ChatChannel.  # noqa: E501
        :type: str
        """

        self._irc_channel = irc_channel

    @property
    def discord_channel_id(self):
        """Gets the discord_channel_id of this ChatChannel.  # noqa: E501

        The Discord channel ID  # noqa: E501

        :return: The discord_channel_id of this ChatChannel.  # noqa: E501
        :rtype: int
        """
        return self._discord_channel_id

    @discord_channel_id.setter
    def discord_channel_id(self, discord_channel_id):
        """Sets the discord_channel_id of this ChatChannel.

        The Discord channel ID  # noqa: E501

        :param discord_channel_id: The discord_channel_id of this ChatChannel.  # noqa: E501
        :type: int
        """

        self._discord_channel_id = discord_channel_id

    @property
    def is_admin_channel(self):
        """Gets the is_admin_channel of this ChatChannel.  # noqa: E501

        If the Tgstation.Server.Api.Models.ChatChannel is an admin channel  # noqa: E501

        :return: The is_admin_channel of this ChatChannel.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin_channel

    @is_admin_channel.setter
    def is_admin_channel(self, is_admin_channel):
        """Sets the is_admin_channel of this ChatChannel.

        If the Tgstation.Server.Api.Models.ChatChannel is an admin channel  # noqa: E501

        :param is_admin_channel: The is_admin_channel of this ChatChannel.  # noqa: E501
        :type: bool
        """

        self._is_admin_channel = is_admin_channel

    @property
    def is_watchdog_channel(self):
        """Gets the is_watchdog_channel of this ChatChannel.  # noqa: E501

        If the Tgstation.Server.Api.Models.ChatChannel is a watchdog channel  # noqa: E501

        :return: The is_watchdog_channel of this ChatChannel.  # noqa: E501
        :rtype: bool
        """
        return self._is_watchdog_channel

    @is_watchdog_channel.setter
    def is_watchdog_channel(self, is_watchdog_channel):
        """Sets the is_watchdog_channel of this ChatChannel.

        If the Tgstation.Server.Api.Models.ChatChannel is a watchdog channel  # noqa: E501

        :param is_watchdog_channel: The is_watchdog_channel of this ChatChannel.  # noqa: E501
        :type: bool
        """

        self._is_watchdog_channel = is_watchdog_channel

    @property
    def is_updates_channel(self):
        """Gets the is_updates_channel of this ChatChannel.  # noqa: E501

        If the Tgstation.Server.Api.Models.ChatChannel is an updates channel  # noqa: E501

        :return: The is_updates_channel of this ChatChannel.  # noqa: E501
        :rtype: bool
        """
        return self._is_updates_channel

    @is_updates_channel.setter
    def is_updates_channel(self, is_updates_channel):
        """Sets the is_updates_channel of this ChatChannel.

        If the Tgstation.Server.Api.Models.ChatChannel is an updates channel  # noqa: E501

        :param is_updates_channel: The is_updates_channel of this ChatChannel.  # noqa: E501
        :type: bool
        """

        self._is_updates_channel = is_updates_channel

    @property
    def tag(self):
        """Gets the tag of this ChatChannel.  # noqa: E501

        A custom tag users can define to group channels together  # noqa: E501

        :return: The tag of this ChatChannel.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ChatChannel.

        A custom tag users can define to group channels together  # noqa: E501

        :param tag: The tag of this ChatChannel.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
