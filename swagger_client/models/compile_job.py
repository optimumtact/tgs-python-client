# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompileJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job': 'Job',
        'revision_information': 'RevisionInformation',
        'byond_version': 'str',
        'dme_name': 'str',
        'output': 'str',
        'directory_name': 'str',
        'minimum_security_level': 'DreamDaemonSecurity',
        'dm_api_version': 'str',
        'id': 'int'
    }

    attribute_map = {
        'job': 'job',
        'revision_information': 'revisionInformation',
        'byond_version': 'byondVersion',
        'dme_name': 'dmeName',
        'output': 'output',
        'directory_name': 'directoryName',
        'minimum_security_level': 'minimumSecurityLevel',
        'dm_api_version': 'dmApiVersion',
        'id': 'id'
    }

    def __init__(self, job=None, revision_information=None, byond_version=None, dme_name=None, output=None, directory_name=None, minimum_security_level=None, dm_api_version=None, id=None):  # noqa: E501
        """CompileJob - a model defined in Swagger"""  # noqa: E501
        self._job = None
        self._revision_information = None
        self._byond_version = None
        self._dme_name = None
        self._output = None
        self._directory_name = None
        self._minimum_security_level = None
        self._dm_api_version = None
        self._id = None
        self.discriminator = None
        if job is not None:
            self.job = job
        if revision_information is not None:
            self.revision_information = revision_information
        if byond_version is not None:
            self.byond_version = byond_version
        if dme_name is not None:
            self.dme_name = dme_name
        if output is not None:
            self.output = output
        if directory_name is not None:
            self.directory_name = directory_name
        if minimum_security_level is not None:
            self.minimum_security_level = minimum_security_level
        if dm_api_version is not None:
            self.dm_api_version = dm_api_version
        if id is not None:
            self.id = id

    @property
    def job(self):
        """Gets the job of this CompileJob.  # noqa: E501


        :return: The job of this CompileJob.  # noqa: E501
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this CompileJob.


        :param job: The job of this CompileJob.  # noqa: E501
        :type: Job
        """

        self._job = job

    @property
    def revision_information(self):
        """Gets the revision_information of this CompileJob.  # noqa: E501


        :return: The revision_information of this CompileJob.  # noqa: E501
        :rtype: RevisionInformation
        """
        return self._revision_information

    @revision_information.setter
    def revision_information(self, revision_information):
        """Sets the revision_information of this CompileJob.


        :param revision_information: The revision_information of this CompileJob.  # noqa: E501
        :type: RevisionInformation
        """

        self._revision_information = revision_information

    @property
    def byond_version(self):
        """Gets the byond_version of this CompileJob.  # noqa: E501

        The Tgstation.Server.Api.Models.Byond.Version the Tgstation.Server.Api.Models.CompileJob was made with  # noqa: E501

        :return: The byond_version of this CompileJob.  # noqa: E501
        :rtype: str
        """
        return self._byond_version

    @byond_version.setter
    def byond_version(self, byond_version):
        """Sets the byond_version of this CompileJob.

        The Tgstation.Server.Api.Models.Byond.Version the Tgstation.Server.Api.Models.CompileJob was made with  # noqa: E501

        :param byond_version: The byond_version of this CompileJob.  # noqa: E501
        :type: str
        """

        self._byond_version = byond_version

    @property
    def dme_name(self):
        """Gets the dme_name of this CompileJob.  # noqa: E501

        The .dme file used for compilation  # noqa: E501

        :return: The dme_name of this CompileJob.  # noqa: E501
        :rtype: str
        """
        return self._dme_name

    @dme_name.setter
    def dme_name(self, dme_name):
        """Sets the dme_name of this CompileJob.

        The .dme file used for compilation  # noqa: E501

        :param dme_name: The dme_name of this CompileJob.  # noqa: E501
        :type: str
        """

        self._dme_name = dme_name

    @property
    def output(self):
        """Gets the output of this CompileJob.  # noqa: E501

        Textual output of DM  # noqa: E501

        :return: The output of this CompileJob.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this CompileJob.

        Textual output of DM  # noqa: E501

        :param output: The output of this CompileJob.  # noqa: E501
        :type: str
        """

        self._output = output

    @property
    def directory_name(self):
        """Gets the directory_name of this CompileJob.  # noqa: E501

        The Game folder the results were compiled into  # noqa: E501

        :return: The directory_name of this CompileJob.  # noqa: E501
        :rtype: str
        """
        return self._directory_name

    @directory_name.setter
    def directory_name(self, directory_name):
        """Sets the directory_name of this CompileJob.

        The Game folder the results were compiled into  # noqa: E501

        :param directory_name: The directory_name of this CompileJob.  # noqa: E501
        :type: str
        """

        self._directory_name = directory_name

    @property
    def minimum_security_level(self):
        """Gets the minimum_security_level of this CompileJob.  # noqa: E501


        :return: The minimum_security_level of this CompileJob.  # noqa: E501
        :rtype: DreamDaemonSecurity
        """
        return self._minimum_security_level

    @minimum_security_level.setter
    def minimum_security_level(self, minimum_security_level):
        """Sets the minimum_security_level of this CompileJob.


        :param minimum_security_level: The minimum_security_level of this CompileJob.  # noqa: E501
        :type: DreamDaemonSecurity
        """

        self._minimum_security_level = minimum_security_level

    @property
    def dm_api_version(self):
        """Gets the dm_api_version of this CompileJob.  # noqa: E501

        The DMAPI System.Version.  # noqa: E501

        :return: The dm_api_version of this CompileJob.  # noqa: E501
        :rtype: str
        """
        return self._dm_api_version

    @dm_api_version.setter
    def dm_api_version(self, dm_api_version):
        """Sets the dm_api_version of this CompileJob.

        The DMAPI System.Version.  # noqa: E501

        :param dm_api_version: The dm_api_version of this CompileJob.  # noqa: E501
        :type: str
        """

        self._dm_api_version = dm_api_version

    @property
    def id(self):
        """Gets the id of this CompileJob.  # noqa: E501

        The ID of the entity.  # noqa: E501

        :return: The id of this CompileJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompileJob.

        The ID of the entity.  # noqa: E501

        :param id: The id of this CompileJob.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompileJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompileJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
