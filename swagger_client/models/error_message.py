# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ErrorMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_api_version': 'str',
        'message': 'str',
        'additional_data': 'str',
        'error_code': 'ErrorCode'
    }

    attribute_map = {
        'server_api_version': 'serverApiVersion',
        'message': 'message',
        'additional_data': 'additionalData',
        'error_code': 'errorCode'
    }

    def __init__(self, server_api_version=None, message=None, additional_data=None, error_code=None):  # noqa: E501
        """ErrorMessage - a model defined in Swagger"""  # noqa: E501
        self._server_api_version = None
        self._message = None
        self._additional_data = None
        self._error_code = None
        self.discriminator = None
        if server_api_version is not None:
            self.server_api_version = server_api_version
        if message is not None:
            self.message = message
        if additional_data is not None:
            self.additional_data = additional_data
        if error_code is not None:
            self.error_code = error_code

    @property
    def server_api_version(self):
        """Gets the server_api_version of this ErrorMessage.  # noqa: E501

        The version of the API the server is using  # noqa: E501

        :return: The server_api_version of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._server_api_version

    @server_api_version.setter
    def server_api_version(self, server_api_version):
        """Sets the server_api_version of this ErrorMessage.

        The version of the API the server is using  # noqa: E501

        :param server_api_version: The server_api_version of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._server_api_version = server_api_version

    @property
    def message(self):
        """Gets the message of this ErrorMessage.  # noqa: E501

        A human readable description of the error  # noqa: E501

        :return: The message of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorMessage.

        A human readable description of the error  # noqa: E501

        :param message: The message of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def additional_data(self):
        """Gets the additional_data of this ErrorMessage.  # noqa: E501

        Additional data associated with the error message.  # noqa: E501

        :return: The additional_data of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ErrorMessage.

        Additional data associated with the error message.  # noqa: E501

        :param additional_data: The additional_data of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def error_code(self):
        """Gets the error_code of this ErrorMessage.  # noqa: E501


        :return: The error_code of this ErrorMessage.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorMessage.


        :param error_code: The error_code of this ErrorMessage.  # noqa: E501
        :type: ErrorCode
        """

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
