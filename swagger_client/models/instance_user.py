# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InstanceUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'instance_user_rights': 'InstanceUserRights',
        'byond_rights': 'ByondRights',
        'dream_daemon_rights': 'DreamDaemonRights',
        'dream_maker_rights': 'DreamMakerRights',
        'repository_rights': 'RepositoryRights',
        'chat_bot_rights': 'ChatBotRights',
        'configuration_rights': 'ConfigurationRights'
    }

    attribute_map = {
        'user_id': 'userId',
        'instance_user_rights': 'instanceUserRights',
        'byond_rights': 'byondRights',
        'dream_daemon_rights': 'dreamDaemonRights',
        'dream_maker_rights': 'dreamMakerRights',
        'repository_rights': 'repositoryRights',
        'chat_bot_rights': 'chatBotRights',
        'configuration_rights': 'configurationRights'
    }

    def __init__(self, user_id=None, instance_user_rights=None, byond_rights=None, dream_daemon_rights=None, dream_maker_rights=None, repository_rights=None, chat_bot_rights=None, configuration_rights=None):  # noqa: E501
        """InstanceUser - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._instance_user_rights = None
        self._byond_rights = None
        self._dream_daemon_rights = None
        self._dream_maker_rights = None
        self._repository_rights = None
        self._chat_bot_rights = None
        self._configuration_rights = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if instance_user_rights is not None:
            self.instance_user_rights = instance_user_rights
        if byond_rights is not None:
            self.byond_rights = byond_rights
        if dream_daemon_rights is not None:
            self.dream_daemon_rights = dream_daemon_rights
        if dream_maker_rights is not None:
            self.dream_maker_rights = dream_maker_rights
        if repository_rights is not None:
            self.repository_rights = repository_rights
        if chat_bot_rights is not None:
            self.chat_bot_rights = chat_bot_rights
        if configuration_rights is not None:
            self.configuration_rights = configuration_rights

    @property
    def user_id(self):
        """Gets the user_id of this InstanceUser.  # noqa: E501

        The Tgstation.Server.Api.Models.Internal.User.Id of the Tgstation.Server.Api.Models.User the Tgstation.Server.Api.Models.InstanceUser belongs to  # noqa: E501

        :return: The user_id of this InstanceUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InstanceUser.

        The Tgstation.Server.Api.Models.Internal.User.Id of the Tgstation.Server.Api.Models.User the Tgstation.Server.Api.Models.InstanceUser belongs to  # noqa: E501

        :param user_id: The user_id of this InstanceUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def instance_user_rights(self):
        """Gets the instance_user_rights of this InstanceUser.  # noqa: E501


        :return: The instance_user_rights of this InstanceUser.  # noqa: E501
        :rtype: InstanceUserRights
        """
        return self._instance_user_rights

    @instance_user_rights.setter
    def instance_user_rights(self, instance_user_rights):
        """Sets the instance_user_rights of this InstanceUser.


        :param instance_user_rights: The instance_user_rights of this InstanceUser.  # noqa: E501
        :type: InstanceUserRights
        """

        self._instance_user_rights = instance_user_rights

    @property
    def byond_rights(self):
        """Gets the byond_rights of this InstanceUser.  # noqa: E501


        :return: The byond_rights of this InstanceUser.  # noqa: E501
        :rtype: ByondRights
        """
        return self._byond_rights

    @byond_rights.setter
    def byond_rights(self, byond_rights):
        """Sets the byond_rights of this InstanceUser.


        :param byond_rights: The byond_rights of this InstanceUser.  # noqa: E501
        :type: ByondRights
        """

        self._byond_rights = byond_rights

    @property
    def dream_daemon_rights(self):
        """Gets the dream_daemon_rights of this InstanceUser.  # noqa: E501


        :return: The dream_daemon_rights of this InstanceUser.  # noqa: E501
        :rtype: DreamDaemonRights
        """
        return self._dream_daemon_rights

    @dream_daemon_rights.setter
    def dream_daemon_rights(self, dream_daemon_rights):
        """Sets the dream_daemon_rights of this InstanceUser.


        :param dream_daemon_rights: The dream_daemon_rights of this InstanceUser.  # noqa: E501
        :type: DreamDaemonRights
        """

        self._dream_daemon_rights = dream_daemon_rights

    @property
    def dream_maker_rights(self):
        """Gets the dream_maker_rights of this InstanceUser.  # noqa: E501


        :return: The dream_maker_rights of this InstanceUser.  # noqa: E501
        :rtype: DreamMakerRights
        """
        return self._dream_maker_rights

    @dream_maker_rights.setter
    def dream_maker_rights(self, dream_maker_rights):
        """Sets the dream_maker_rights of this InstanceUser.


        :param dream_maker_rights: The dream_maker_rights of this InstanceUser.  # noqa: E501
        :type: DreamMakerRights
        """

        self._dream_maker_rights = dream_maker_rights

    @property
    def repository_rights(self):
        """Gets the repository_rights of this InstanceUser.  # noqa: E501


        :return: The repository_rights of this InstanceUser.  # noqa: E501
        :rtype: RepositoryRights
        """
        return self._repository_rights

    @repository_rights.setter
    def repository_rights(self, repository_rights):
        """Sets the repository_rights of this InstanceUser.


        :param repository_rights: The repository_rights of this InstanceUser.  # noqa: E501
        :type: RepositoryRights
        """

        self._repository_rights = repository_rights

    @property
    def chat_bot_rights(self):
        """Gets the chat_bot_rights of this InstanceUser.  # noqa: E501


        :return: The chat_bot_rights of this InstanceUser.  # noqa: E501
        :rtype: ChatBotRights
        """
        return self._chat_bot_rights

    @chat_bot_rights.setter
    def chat_bot_rights(self, chat_bot_rights):
        """Sets the chat_bot_rights of this InstanceUser.


        :param chat_bot_rights: The chat_bot_rights of this InstanceUser.  # noqa: E501
        :type: ChatBotRights
        """

        self._chat_bot_rights = chat_bot_rights

    @property
    def configuration_rights(self):
        """Gets the configuration_rights of this InstanceUser.  # noqa: E501


        :return: The configuration_rights of this InstanceUser.  # noqa: E501
        :rtype: ConfigurationRights
        """
        return self._configuration_rights

    @configuration_rights.setter
    def configuration_rights(self, configuration_rights):
        """Sets the configuration_rights of this InstanceUser.


        :param configuration_rights: The configuration_rights of this InstanceUser.  # noqa: E501
        :type: ConfigurationRights
        """

        self._configuration_rights = configuration_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
