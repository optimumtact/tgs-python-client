# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'started_by': 'User',
        'cancelled_by': 'User',
        'progress': 'int',
        'description': 'str',
        'error_code': 'ErrorCode',
        'exception_details': 'str',
        'started_at': 'datetime',
        'stopped_at': 'datetime',
        'cancelled': 'bool',
        'cancel_rights_type': 'RightsType',
        'cancel_right': 'int',
        'id': 'int'
    }

    attribute_map = {
        'started_by': 'startedBy',
        'cancelled_by': 'cancelledBy',
        'progress': 'progress',
        'description': 'description',
        'error_code': 'errorCode',
        'exception_details': 'exceptionDetails',
        'started_at': 'startedAt',
        'stopped_at': 'stoppedAt',
        'cancelled': 'cancelled',
        'cancel_rights_type': 'cancelRightsType',
        'cancel_right': 'cancelRight',
        'id': 'id'
    }

    def __init__(self, started_by=None, cancelled_by=None, progress=None, description=None, error_code=None, exception_details=None, started_at=None, stopped_at=None, cancelled=None, cancel_rights_type=None, cancel_right=None, id=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._started_by = None
        self._cancelled_by = None
        self._progress = None
        self._description = None
        self._error_code = None
        self._exception_details = None
        self._started_at = None
        self._stopped_at = None
        self._cancelled = None
        self._cancel_rights_type = None
        self._cancel_right = None
        self._id = None
        self.discriminator = None
        if started_by is not None:
            self.started_by = started_by
        if cancelled_by is not None:
            self.cancelled_by = cancelled_by
        if progress is not None:
            self.progress = progress
        if description is not None:
            self.description = description
        if error_code is not None:
            self.error_code = error_code
        if exception_details is not None:
            self.exception_details = exception_details
        if started_at is not None:
            self.started_at = started_at
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if cancelled is not None:
            self.cancelled = cancelled
        if cancel_rights_type is not None:
            self.cancel_rights_type = cancel_rights_type
        if cancel_right is not None:
            self.cancel_right = cancel_right
        if id is not None:
            self.id = id

    @property
    def started_by(self):
        """Gets the started_by of this Job.  # noqa: E501


        :return: The started_by of this Job.  # noqa: E501
        :rtype: User
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this Job.


        :param started_by: The started_by of this Job.  # noqa: E501
        :type: User
        """

        self._started_by = started_by

    @property
    def cancelled_by(self):
        """Gets the cancelled_by of this Job.  # noqa: E501


        :return: The cancelled_by of this Job.  # noqa: E501
        :rtype: User
        """
        return self._cancelled_by

    @cancelled_by.setter
    def cancelled_by(self, cancelled_by):
        """Sets the cancelled_by of this Job.


        :param cancelled_by: The cancelled_by of this Job.  # noqa: E501
        :type: User
        """

        self._cancelled_by = cancelled_by

    @property
    def progress(self):
        """Gets the progress of this Job.  # noqa: E501

        Optional progress between 0 and 100 inclusive  # noqa: E501

        :return: The progress of this Job.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Job.

        Optional progress between 0 and 100 inclusive  # noqa: E501

        :param progress: The progress of this Job.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def description(self):
        """Gets the description of this Job.  # noqa: E501

        English description of the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :return: The description of this Job.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        English description of the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :param description: The description of this Job.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def error_code(self):
        """Gets the error_code of this Job.  # noqa: E501


        :return: The error_code of this Job.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Job.


        :param error_code: The error_code of this Job.  # noqa: E501
        :type: ErrorCode
        """

        self._error_code = error_code

    @property
    def exception_details(self):
        """Gets the exception_details of this Job.  # noqa: E501

        Details of any exceptions caught during the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :return: The exception_details of this Job.  # noqa: E501
        :rtype: str
        """
        return self._exception_details

    @exception_details.setter
    def exception_details(self, exception_details):
        """Sets the exception_details of this Job.

        Details of any exceptions caught during the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :param exception_details: The exception_details of this Job.  # noqa: E501
        :type: str
        """

        self._exception_details = exception_details

    @property
    def started_at(self):
        """Gets the started_at of this Job.  # noqa: E501

        When the Tgstation.Server.Api.Models.Internal.Job was started  # noqa: E501

        :return: The started_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Job.

        When the Tgstation.Server.Api.Models.Internal.Job was started  # noqa: E501

        :param started_at: The started_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def stopped_at(self):
        """Gets the stopped_at of this Job.  # noqa: E501

        When the Tgstation.Server.Api.Models.Internal.Job stopped  # noqa: E501

        :return: The stopped_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at):
        """Sets the stopped_at of this Job.

        When the Tgstation.Server.Api.Models.Internal.Job stopped  # noqa: E501

        :param stopped_at: The stopped_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def cancelled(self):
        """Gets the cancelled of this Job.  # noqa: E501

        If the Tgstation.Server.Api.Models.Internal.Job was cancelled  # noqa: E501

        :return: The cancelled of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this Job.

        If the Tgstation.Server.Api.Models.Internal.Job was cancelled  # noqa: E501

        :param cancelled: The cancelled of this Job.  # noqa: E501
        :type: bool
        """

        self._cancelled = cancelled

    @property
    def cancel_rights_type(self):
        """Gets the cancel_rights_type of this Job.  # noqa: E501


        :return: The cancel_rights_type of this Job.  # noqa: E501
        :rtype: RightsType
        """
        return self._cancel_rights_type

    @cancel_rights_type.setter
    def cancel_rights_type(self, cancel_rights_type):
        """Sets the cancel_rights_type of this Job.


        :param cancel_rights_type: The cancel_rights_type of this Job.  # noqa: E501
        :type: RightsType
        """

        self._cancel_rights_type = cancel_rights_type

    @property
    def cancel_right(self):
        """Gets the cancel_right of this Job.  # noqa: E501

        The N:Tgstation.Server.Api.Rights required to cancel the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :return: The cancel_right of this Job.  # noqa: E501
        :rtype: int
        """
        return self._cancel_right

    @cancel_right.setter
    def cancel_right(self, cancel_right):
        """Sets the cancel_right of this Job.

        The N:Tgstation.Server.Api.Rights required to cancel the Tgstation.Server.Api.Models.Internal.Job  # noqa: E501

        :param cancel_right: The cancel_right of this Job.  # noqa: E501
        :type: int
        """

        self._cancel_right = cancel_right

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        The ID of the entity.  # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The ID of the entity.  # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
