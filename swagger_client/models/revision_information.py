# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RevisionInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_test_merge': 'TestMerge',
        'active_test_merges': 'list[TestMerge]',
        'compile_jobs': 'list[CompileJob]',
        'commit_sha': 'str',
        'origin_commit_sha': 'str'
    }

    attribute_map = {
        'primary_test_merge': 'primaryTestMerge',
        'active_test_merges': 'activeTestMerges',
        'compile_jobs': 'compileJobs',
        'commit_sha': 'commitSha',
        'origin_commit_sha': 'originCommitSha'
    }

    def __init__(self, primary_test_merge=None, active_test_merges=None, compile_jobs=None, commit_sha=None, origin_commit_sha=None):  # noqa: E501
        """RevisionInformation - a model defined in Swagger"""  # noqa: E501
        self._primary_test_merge = None
        self._active_test_merges = None
        self._compile_jobs = None
        self._commit_sha = None
        self._origin_commit_sha = None
        self.discriminator = None
        if primary_test_merge is not None:
            self.primary_test_merge = primary_test_merge
        if active_test_merges is not None:
            self.active_test_merges = active_test_merges
        if compile_jobs is not None:
            self.compile_jobs = compile_jobs
        if commit_sha is not None:
            self.commit_sha = commit_sha
        if origin_commit_sha is not None:
            self.origin_commit_sha = origin_commit_sha

    @property
    def primary_test_merge(self):
        """Gets the primary_test_merge of this RevisionInformation.  # noqa: E501


        :return: The primary_test_merge of this RevisionInformation.  # noqa: E501
        :rtype: TestMerge
        """
        return self._primary_test_merge

    @primary_test_merge.setter
    def primary_test_merge(self, primary_test_merge):
        """Sets the primary_test_merge of this RevisionInformation.


        :param primary_test_merge: The primary_test_merge of this RevisionInformation.  # noqa: E501
        :type: TestMerge
        """

        self._primary_test_merge = primary_test_merge

    @property
    def active_test_merges(self):
        """Gets the active_test_merges of this RevisionInformation.  # noqa: E501

        The Tgstation.Server.Api.Models.TestMerges active in the Tgstation.Server.Api.Models.RevisionInformation  # noqa: E501

        :return: The active_test_merges of this RevisionInformation.  # noqa: E501
        :rtype: list[TestMerge]
        """
        return self._active_test_merges

    @active_test_merges.setter
    def active_test_merges(self, active_test_merges):
        """Sets the active_test_merges of this RevisionInformation.

        The Tgstation.Server.Api.Models.TestMerges active in the Tgstation.Server.Api.Models.RevisionInformation  # noqa: E501

        :param active_test_merges: The active_test_merges of this RevisionInformation.  # noqa: E501
        :type: list[TestMerge]
        """

        self._active_test_merges = active_test_merges

    @property
    def compile_jobs(self):
        """Gets the compile_jobs of this RevisionInformation.  # noqa: E501

        The Tgstation.Server.Api.Models.CompileJobs made from the Tgstation.Server.Api.Models.RevisionInformation  # noqa: E501

        :return: The compile_jobs of this RevisionInformation.  # noqa: E501
        :rtype: list[CompileJob]
        """
        return self._compile_jobs

    @compile_jobs.setter
    def compile_jobs(self, compile_jobs):
        """Sets the compile_jobs of this RevisionInformation.

        The Tgstation.Server.Api.Models.CompileJobs made from the Tgstation.Server.Api.Models.RevisionInformation  # noqa: E501

        :param compile_jobs: The compile_jobs of this RevisionInformation.  # noqa: E501
        :type: list[CompileJob]
        """

        self._compile_jobs = compile_jobs

    @property
    def commit_sha(self):
        """Gets the commit_sha of this RevisionInformation.  # noqa: E501

        The revision sha  # noqa: E501

        :return: The commit_sha of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this RevisionInformation.

        The revision sha  # noqa: E501

        :param commit_sha: The commit_sha of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._commit_sha = commit_sha

    @property
    def origin_commit_sha(self):
        """Gets the origin_commit_sha of this RevisionInformation.  # noqa: E501

        The sha of the most recent remote commit  # noqa: E501

        :return: The origin_commit_sha of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._origin_commit_sha

    @origin_commit_sha.setter
    def origin_commit_sha(self, origin_commit_sha):
        """Sets the origin_commit_sha of this RevisionInformation.

        The sha of the most recent remote commit  # noqa: E501

        :param origin_commit_sha: The origin_commit_sha of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._origin_commit_sha = origin_commit_sha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevisionInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
