# coding: utf-8

"""
    TGS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'created_by': 'User',
        'id': 'int',
        'enabled': 'bool',
        'created_at': 'datetime',
        'system_identifier': 'str',
        'name': 'str',
        'administration_rights': 'AdministrationRights',
        'instance_manager_rights': 'InstanceManagerRights'
    }

    attribute_map = {
        'password': 'password',
        'created_by': 'createdBy',
        'id': 'id',
        'enabled': 'enabled',
        'created_at': 'createdAt',
        'system_identifier': 'systemIdentifier',
        'name': 'name',
        'administration_rights': 'administrationRights',
        'instance_manager_rights': 'instanceManagerRights'
    }

    def __init__(self, password=None, created_by=None, id=None, enabled=None, created_at=None, system_identifier=None, name=None, administration_rights=None, instance_manager_rights=None):  # noqa: E501
        """UserUpdate - a model defined in Swagger"""  # noqa: E501
        self._password = None
        self._created_by = None
        self._id = None
        self._enabled = None
        self._created_at = None
        self._system_identifier = None
        self._name = None
        self._administration_rights = None
        self._instance_manager_rights = None
        self.discriminator = None
        if password is not None:
            self.password = password
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if created_at is not None:
            self.created_at = created_at
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if name is not None:
            self.name = name
        if administration_rights is not None:
            self.administration_rights = administration_rights
        if instance_manager_rights is not None:
            self.instance_manager_rights = instance_manager_rights

    @property
    def password(self):
        """Gets the password of this UserUpdate.  # noqa: E501

        Cleartext password of the Tgstation.Server.Api.Models.User  # noqa: E501

        :return: The password of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserUpdate.

        Cleartext password of the Tgstation.Server.Api.Models.User  # noqa: E501

        :param password: The password of this UserUpdate.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def created_by(self):
        """Gets the created_by of this UserUpdate.  # noqa: E501


        :return: The created_by of this UserUpdate.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserUpdate.


        :param created_by: The created_by of this UserUpdate.  # noqa: E501
        :type: User
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this UserUpdate.  # noqa: E501

        The ID of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :return: The id of this UserUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserUpdate.

        The ID of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :param id: The id of this UserUpdate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this UserUpdate.  # noqa: E501

        If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled  # noqa: E501

        :return: The enabled of this UserUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserUpdate.

        If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled  # noqa: E501

        :param enabled: The enabled of this UserUpdate.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_at(self):
        """Gets the created_at of this UserUpdate.  # noqa: E501

        When the Tgstation.Server.Api.Models.Internal.User was created  # noqa: E501

        :return: The created_at of this UserUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserUpdate.

        When the Tgstation.Server.Api.Models.Internal.User was created  # noqa: E501

        :param created_at: The created_at of this UserUpdate.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def system_identifier(self):
        """Gets the system_identifier of this UserUpdate.  # noqa: E501

        The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively  # noqa: E501

        :return: The system_identifier of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this UserUpdate.

        The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively  # noqa: E501

        :param system_identifier: The system_identifier of this UserUpdate.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def name(self):
        """Gets the name of this UserUpdate.  # noqa: E501

        The name of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :return: The name of this UserUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserUpdate.

        The name of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :param name: The name of this UserUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def administration_rights(self):
        """Gets the administration_rights of this UserUpdate.  # noqa: E501


        :return: The administration_rights of this UserUpdate.  # noqa: E501
        :rtype: AdministrationRights
        """
        return self._administration_rights

    @administration_rights.setter
    def administration_rights(self, administration_rights):
        """Sets the administration_rights of this UserUpdate.


        :param administration_rights: The administration_rights of this UserUpdate.  # noqa: E501
        :type: AdministrationRights
        """

        self._administration_rights = administration_rights

    @property
    def instance_manager_rights(self):
        """Gets the instance_manager_rights of this UserUpdate.  # noqa: E501


        :return: The instance_manager_rights of this UserUpdate.  # noqa: E501
        :rtype: InstanceManagerRights
        """
        return self._instance_manager_rights

    @instance_manager_rights.setter
    def instance_manager_rights(self, instance_manager_rights):
        """Sets the instance_manager_rights of this UserUpdate.


        :param instance_manager_rights: The instance_manager_rights of this UserUpdate.  # noqa: E501
        :type: InstanceManagerRights
        """

        self._instance_manager_rights = instance_manager_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
